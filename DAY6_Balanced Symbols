#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_SIZE 100

struct Stack {
    int top;
    unsigned capacity;
    char* array;
};

struct Stack* createStack(unsigned capacity) {
    struct Stack* stack = (struct Stack*)malloc(sizeof(struct Stack));
    stack->capacity = capacity;
    stack->top = -1;
    stack->array = (char*)malloc(stack->capacity * sizeof(char));
    return stack;
}

int isEmpty(struct Stack* stack) {
    return stack->top == -1;
}

void push(struct Stack* stack, char item) {
    stack->array[++stack->top] = item;
}

char pop(struct Stack* stack) {
    if (!isEmpty(stack))
        return stack->array[stack->top--];
    return '$';
}

int isMatchingPair(char character1, char character2) {
    if (character1 == '(' && character2 == ')')
        return 1;
    else if (character1 == '{' && character2 == '}')
        return 1;
    else if (character1 == '[' && character2 == ']')
        return 1;
    else
        return 0;
}

int areSymbolsBalanced(char* exp) {
    struct Stack* stack = createStack(strlen(exp));
    int i;

    for (i = 0; i < strlen(exp); i++) {
        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[')
            push(stack, exp[i]);
        if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {
            if (isEmpty(stack))
                return 0;
            else if (!isMatchingPair(pop(stack), exp[i]))
                return 0;
        }
    }

    if (isEmpty(stack))
        return 1;
    else
        return 0;
}

int main() {
printf("sai_192311187\n");
    char exp[MAX_SIZE];
    printf("Enter an expression with parentheses, square brackets, and curly braces: ");
    scanf("%s", exp);
    if (areSymbolsBalanced(exp))
        printf("The symbols are balanced.\n");
    else
        printf("The symbols are not balanced.\n");
    return 0;
}
